{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanmay\\\\Projects\\\\temperature-humidity-monitoring-system\\\\frontend\\\\react\\\\src\\\\components\\\\DataChartDisplayer.js\",\n  _s = $RefreshSig$();\n/* jshint esversion: 11 */\n\nimport React, { useState, useEffect, memo } from 'react';\nimport { Chart, registerables, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n// import { Line } from 'react-chartjs';\n// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n// import 'chartjs-adapter-date-fns';\nimport { de } from 'date-fns/locale';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.defaults.color = \"#000000\";\nChart.register(...registerables, TimeScale);\nconst DataChartDisplayer = () => {\n  _s();\n  let [detailsOfServerData, setDetailsOfServerData] = useState([]);\n  // let details;\n\n  useEffect(() => {\n    setTimeout(async () => {\n      let response = await fetch(\"http://localhost:3005/api/th/values/\");\n      let details = await response.json();\n      setDetailsOfServerData(details.reverse());\n      console.log(detailsOfServerData);\n    }, 1000);\n  }, [detailsOfServerData]);\n\n  // let listOfTimeStamps = detailsOfServerData.map(datapoint => datapoint.DateTime);\n\n  const dataToBeDisplayed = {\n    // labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    labels: detailsOfServerData.map(datapoint => datapoint.DateTime),\n    datasets: [{\n      label: \"Temperature\",\n      // data: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],\n      data: detailsOfServerData.map(datapoint => datapoint.Temperature),\n      borderColor: \"red\",\n      fill: false,\n      pointStyle: 'circle',\n      backgroundColor: 'red',\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      lineTension: 0\n    }, {\n      label: \"Humidity\",\n      // data: [2, 4, 6, 7, 10, 12, 14, 15, 18, 20, 22, 23, 26, 28, 30],\n      data: detailsOfServerData.map(datapoint => datapoint.RelativeHumidity),\n      borderColor: \"blue\",\n      fill: false,\n      pointStyle: 'circle',\n      backgroundColor: 'blue',\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      lineTension: 0\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      // title: {\n      //     display: true,\n      //     position: \"top\",\n      //     text: \"Temperature and Relative Humidity Chart\",\n      //     font: {size: 30, },\n      //     color: \"black\"\n      // },\n      legend: {\n        display: true,\n        position: \"top\",\n        labels: {\n          color: \"black\"\n        }\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 0,\n        // 25,\n        bottom: 0,\n        top: 0 // 25\n      }\n    },\n\n    scales: {\n      // adapters: {\n      //     date: {\n      //         locale: de\n      //     }\n      // },\n      x: {\n        // type: \"linear\",\n        // type: \"time\",\n        title: {\n          display: true,\n          text: \"Local Time in (UTC)\",\n          color: \"black\",\n          font: {\n            size: 16\n          }\n        },\n        ticks: {\n          // beginAtZero: true,\n          min: 0,\n          stepSize: 1\n        }\n        // grid: {\n        //     display: false\n        // }\n      },\n\n      y: {\n        beginAtZero: true,\n        // type: \"linear\",\n        // grid: {\n        //     display: false\n        // },\n        scaleLabel: {\n          display: true\n        },\n        ticks: {\n          min: 0,\n          max: 30,\n          stepSize: 2\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"auto\",\n      height: \"60vh\",\n      width: \"60vw\",\n      border: \"1px solid black\",\n      padding: '16px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: dataToBeDisplayed,\n      options: chartOptions\n      // sx={{  }}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n_s(DataChartDisplayer, \"rpqrpD/G6NbNASHEQB7yKzbaFFo=\");\n_c = DataChartDisplayer;\nexport default _c2 = /*#__PURE__*/memo(DataChartDisplayer);\n\n// const dataToBeDisplayed = {\n//     labels: detailsOfServerData.map(datapoint => datapoint.DateTime),\n//     datasets: [{\n//         label: \"Temperature\",\n//         data: detailsOfServerData.map(datapoint => datapoint.Temperature),\n//         borderColor: \"red\",\n//         fill: false,\n//         pointStyle: 'circle',\n//         // backgroundColor: 'red',\n//         pointColor: 'red',\n//         pointRadius: 5,\n//         pointHoverRadius: 7,\n//         lineTension: 0\n//     }, \n//     {\n//         label: \"Humidity\",\n//         data: detailsOfServerData.map(datapoint => datapoint.RelativeHumidity),\n//         borderColor: \"blue\",\n//         fill: false,\n//         pointStyle: 'circle',\n//         // backgroundColor: 'blue',\n//         pointColor: 'blue',\n//         pointRadius: 5,\n//         pointHoverRadius: 7,\n//         lineTension: 0\n//     }]\n// };\n\n// const chartOptions = {\n//     title: {\n//         display: true,\n//         text: \"Temperature and Relative Humidity Graph\",\n//         fontSize: 25\n//     },\n//     legend: {\n//         display: true,\n//         position: \"top\",\n//         labels: {\n//             fontColor: \"black\"\n//         }\n//     },\n//     layout: {\n//         padding: {\n//             left: 0,\n//             right: 0, // 25,\n//             bottom: 0,\n//             top: 0 // 25\n//         }\n//     },\n//     tooltips: {\n//         enabled: true\n//     },\n//     scales: {\n//         xAxes: [{\n//             scaleLabel: {\n//                 display: true,\n//                 labelString: \"Local Time (in UTC)\"\n//             }\n//         }],\n//         yAxes: [{\n//             scaleLabel: {\n//                 display: true\n//             },\n//             ticks: {\n//                 beginAtZero: true\n//             }\n//         }]\n//     }\n// };\nvar _c, _c2;\n$RefreshReg$(_c, \"DataChartDisplayer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","memo","Chart","registerables","TimeScale","Line","de","defaults","color","register","DataChartDisplayer","detailsOfServerData","setDetailsOfServerData","setTimeout","response","fetch","details","json","reverse","console","log","dataToBeDisplayed","labels","map","datapoint","DateTime","datasets","label","data","Temperature","borderColor","fill","pointStyle","backgroundColor","pointRadius","pointHoverRadius","lineTension","RelativeHumidity","chartOptions","responsive","plugins","legend","display","position","tooltip","enabled","layout","padding","left","right","bottom","top","scales","x","title","text","font","size","ticks","min","stepSize","y","beginAtZero","scaleLabel","max","margin","height","width","border"],"sources":["C:/Users/Tanmay/Projects/temperature-humidity-monitoring-system/frontend/react/src/components/DataChartDisplayer.js"],"sourcesContent":["/* jshint esversion: 11 */\r\n\r\nimport React, { useState, useEffect, memo } from 'react';\r\nimport { Chart, registerables, TimeScale } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n// import { Line } from 'react-chartjs';\r\n// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\n// import 'chartjs-adapter-date-fns';\r\nimport { de } from 'date-fns/locale';\r\n\r\n\r\nChart.defaults.color = \"#000000\";\r\nChart.register(...registerables, TimeScale);\r\n\r\n\r\nconst DataChartDisplayer = () => {\r\n\r\n    let [detailsOfServerData, setDetailsOfServerData] = useState([]);\r\n    // let details;\r\n\r\n    useEffect(() => {\r\n        setTimeout(async () => { \r\n            let response = await fetch(\"http://localhost:3005/api/th/values/\");\r\n            let details = await response.json();\r\n            setDetailsOfServerData(details.reverse());\r\n            console.log(detailsOfServerData);\r\n        }, 1000);\r\n    }, [detailsOfServerData]);\r\n\r\n    // let listOfTimeStamps = detailsOfServerData.map(datapoint => datapoint.DateTime);\r\n\r\n    const dataToBeDisplayed = {\r\n            // labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\r\n            labels: detailsOfServerData.map(datapoint => datapoint.DateTime),\r\n            datasets:[\r\n                {\r\n                    label: \"Temperature\",\r\n                    // data: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],\r\n                    data: detailsOfServerData.map(datapoint => datapoint.Temperature),\r\n                    borderColor: \"red\",\r\n                    fill: false,\r\n                    pointStyle: 'circle',\r\n                    backgroundColor: 'red',\r\n                    pointRadius: 5,\r\n                    pointHoverRadius: 7,\r\n                    lineTension: 0\r\n                }, \r\n                {\r\n                    label: \"Humidity\",\r\n                    // data: [2, 4, 6, 7, 10, 12, 14, 15, 18, 20, 22, 23, 26, 28, 30],\r\n                    data: detailsOfServerData.map(datapoint => datapoint.RelativeHumidity),\r\n                    borderColor: \"blue\",\r\n                    fill: false,\r\n                    pointStyle: 'circle',\r\n                    backgroundColor: 'blue',\r\n                    pointRadius: 5,\r\n                    pointHoverRadius: 7,\r\n                    lineTension: 0\r\n                }\r\n            ]\r\n        };\r\n    \r\n        const chartOptions = {\r\n            responsive: true,\r\n            plugins: {\r\n                // title: {\r\n                //     display: true,\r\n                //     position: \"top\",\r\n                //     text: \"Temperature and Relative Humidity Chart\",\r\n                //     font: {size: 30, },\r\n                //     color: \"black\"\r\n                // },\r\n                legend: {\r\n                    display: true,\r\n                    position: \"top\",\r\n                    labels: {\r\n                        color: \"black\",\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    enabled: true\r\n                },\r\n            },\r\n            layout: {\r\n                padding: {\r\n                    left: 0,\r\n                    right: 0, // 25,\r\n                    bottom: 0,\r\n                    top: 0 // 25\r\n                }\r\n            },\r\n            scales: {\r\n                // adapters: {\r\n                //     date: {\r\n                //         locale: de\r\n                //     }\r\n                // },\r\n                x: {\r\n                    // type: \"linear\",\r\n                    // type: \"time\",\r\n                    title: {\r\n                        display: true,\r\n                        text: \"Local Time in (UTC)\",\r\n                        color: \"black\",\r\n                        font: {size: 16}\r\n                    },\r\n                    ticks: {\r\n                        // beginAtZero: true,\r\n                        min: 0,\r\n                        stepSize: 1\r\n                    }\r\n                    // grid: {\r\n                    //     display: false\r\n                    // }\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    // type: \"linear\",\r\n                    // grid: {\r\n                    //     display: false\r\n                    // },\r\n                    scaleLabel: {\r\n                        display: true\r\n                    },\r\n                    ticks: {\r\n                        min: 0,\r\n                        max: 30,\r\n                        stepSize: 2\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    return (\r\n        <div style={{ margin: \"auto\", height: \"60vh\", width: \"60vw\", border: \"1px solid black\", padding: '16px' }}>\r\n            <Line \r\n                data={dataToBeDisplayed}\r\n                options={chartOptions}\r\n                // sx={{  }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(DataChartDisplayer);\r\n\r\n\r\n\r\n        // const dataToBeDisplayed = {\r\n        //     labels: detailsOfServerData.map(datapoint => datapoint.DateTime),\r\n        //     datasets: [{\r\n        //         label: \"Temperature\",\r\n        //         data: detailsOfServerData.map(datapoint => datapoint.Temperature),\r\n        //         borderColor: \"red\",\r\n        //         fill: false,\r\n        //         pointStyle: 'circle',\r\n        //         // backgroundColor: 'red',\r\n        //         pointColor: 'red',\r\n        //         pointRadius: 5,\r\n        //         pointHoverRadius: 7,\r\n        //         lineTension: 0\r\n        //     }, \r\n        //     {\r\n        //         label: \"Humidity\",\r\n        //         data: detailsOfServerData.map(datapoint => datapoint.RelativeHumidity),\r\n        //         borderColor: \"blue\",\r\n        //         fill: false,\r\n        //         pointStyle: 'circle',\r\n        //         // backgroundColor: 'blue',\r\n        //         pointColor: 'blue',\r\n        //         pointRadius: 5,\r\n        //         pointHoverRadius: 7,\r\n        //         lineTension: 0\r\n        //     }]\r\n        // };\r\n    \r\n        // const chartOptions = {\r\n        //     title: {\r\n        //         display: true,\r\n        //         text: \"Temperature and Relative Humidity Graph\",\r\n        //         fontSize: 25\r\n        //     },\r\n        //     legend: {\r\n        //         display: true,\r\n        //         position: \"top\",\r\n        //         labels: {\r\n        //             fontColor: \"black\"\r\n        //         }\r\n        //     },\r\n        //     layout: {\r\n        //         padding: {\r\n        //             left: 0,\r\n        //             right: 0, // 25,\r\n        //             bottom: 0,\r\n        //             top: 0 // 25\r\n        //         }\r\n        //     },\r\n        //     tooltips: {\r\n        //         enabled: true\r\n        //     },\r\n        //     scales: {\r\n        //         xAxes: [{\r\n        //             scaleLabel: {\r\n        //                 display: true,\r\n        //                 labelString: \"Local Time (in UTC)\"\r\n        //             }\r\n        //         }],\r\n        //         yAxes: [{\r\n        //             scaleLabel: {\r\n        //                 display: true\r\n        //             },\r\n        //             ticks: {\r\n        //                 beginAtZero: true\r\n        //             }\r\n        //         }]\r\n        //     }\r\n        // };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}